# cloudrun.yml
steps:

  - id: Snyk Open Source Test
    name: 'snyk/snyk-cli:npm'
    entrypoint: bash
    args:
      - '-c'
      - |-
        snyk config set api=${_SNYK_TOKEN}
        snyk test --severity-threshold=${_SEVERITY} || true

  - id: Snyk Code Test
    name: 'snyk/snyk-cli:npm'
    entrypoint: bash
    args:
      - '-c'
      - |-
        snyk config set api=${_SNYK_TOKEN}
        snyk code test --severity-threshold=${_SEVERITY} || true

  - id: Snyk Container Test
    name: 'snyk/snyk-cli:npm'
    entrypoint: bash
    args:
      - '-c'
      - >-
        snyk config set api=${_SNYK_TOKEN}
        snyk container test --severity-threshold=${_SEVERITY} ${_IMAGE_NAME}:${_TAG}

  - id: Snyk IaC Test
    name: 'snyk/snyk-cli:npm'
    entrypoint: bash
    args:
      - '-c'
      - |-
        snyk config set api=${_SNYK_TOKEN}
        (test -f main.tf && snyk iac test --severity-threshold=${_SEVERITY} main.tf) || true

  - id: Create HTML artifact
    name: 'snyk/snyk-cli:npm'
    entrypoint: bash
    args:
      - '-c'
      - >-
        snyk config set api=${_SNYK_TOKEN}
        set -o pipefail
        snyk test --severity-threshold=${_SEVERITY} --json | snyk-to-html -o results.html || true

  - id: Terraform init
    name: 'gcr.io/${PROJECT_ID}/terraform'
    args: ['init',
      '-backend-config=project=${PROJECT_ID}',
      '-backend-config=bucket=${_BUCKET}']
    env:
      - "TF_VAR_project-name=${PROJECT_ID}"
      - "TF_VAR_image=${_IMAGE_NAME}:${_TAG}"
      - "TF_VAR_region=${_REGION}"
      - "TF_VAR_app_name=${_SERVICE_NAME}"

  - id: Terraform plan
    name: 'gcr.io/${PROJECT_ID}/terraform'
    args: ['plan']
    env:
      - "TF_VAR_project-name=${PROJECT_ID}"
      - "TF_VAR_image=${_IMAGE_NAME}:${_TAG}"
      - "TF_VAR_region=${_REGION}"
      - "TF_VAR_app_name=${_SERVICE_NAME}"

  - id: Terraform show
    name: 'gcr.io/${PROJECT_ID}/terraform'
    entrypoint: '/bin/sh'
    args: |
      terrform show -json > tfplan.json
    env:
      - "TF_VAR_project-name=${PROJECT_ID}"
      - "TF_VAR_image=${_IMAGE_NAME}:${_TAG}"
      - "TF_VAR_region=${_REGION}"
      - "TF_VAR_app_name=${_SERVICE_NAME}"

  - id: Validate policy compliance
    name: 'openpolicyagent/conftest:latest'
    args: ['test', 'tfplan.json']

  - id: Terraform apply
    name: 'gcr.io/${PROJECT_ID}/terraform'
    args: ['apply', '-auto-approve']
    env:
      - "TF_VAR_project-name=${PROJECT_ID}"
      - "TF_VAR_image=${_IMAGE_NAME}:${_TAG}"
      - "TF_VAR_region=${_REGION}"
      - "TF_VAR_app_name=${_SERVICE_NAME}"

options:
    dynamic_substitutions: true

substitutions:
  _SERVICE_NAME: $REPO_NAME
  _IMAGE_NAME: gcr.io/$PROJECT_ID/$REPO_NAME
  _SNYK_TOKEN: ''
  _BUILDER: paketobuildpacks/builder:full
  _SEVERITY: medium
  _REGION: us-central1
  _TAG: $COMMIT_SHA
  _BUCKET: # Provide your own bucket name

images:
 - '${_IMAGE_NAME}'

artifacts:
  objects:
    location: 'gs://cloud-build-artifacts/scan_output'
    paths:
      - results-${_TAG}.html
